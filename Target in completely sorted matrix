public class MatrixSearch {

    public static void main(String[] args) {
        int[][] arr = {
            {1, 3, 5, 7},
            {10, 11, 16, 20},
            {23, 30, 34, 50}
        };
        int target = 3;
        int[] result = search2(arr, target);
        if (result[0] == -1) {
            System.out.println("Target not found");
        } else {
            System.out.println("Target found at: [" + result[0] + ", " + result[1] + "]");
        }
    }

    static int[] search2(int[][] arr, int target) {
        int n = arr.length, m = arr[0].length;

        // Apply binary search on the last column
        int lb = 0, ub = n - 1, mid;
        while (lb < ub) {
            mid = lb + (ub - lb) / 2;

            if (arr[mid][m - 1] < target) {
                lb = mid + 1;
            } else if (arr[mid][m - 1] > target) {
                ub = mid;
            } else {
                return new int[] { mid, m - 1 };
            }
        }

        // Here lb == ub
        int ind = binarySearch(arr[lb], target);
        if (ind != -1)
            return new int[] { lb, ind };
        return new int[] { -1, -1 };
    }

    static int binarySearch(int[] arr, int target) {
        int lb = 0, ub = arr.length - 1;
        while (lb <= ub) {
            int mid = lb + (ub - lb) / 2;
            if (arr[mid] < target) {
                lb = mid + 1;
            } else if (arr[mid] > target) {
                ub = mid - 1;
            } else {
                return mid;
            }
        }
        return -1;
    }
}
